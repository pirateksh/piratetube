{"version":3,"sources":["components/video_list_item.js","components/video_list.js","components/search_box.js","components/video_detail.js","App.js","serviceWorker.js","index.js"],"names":["VideoListItem","video","onVideoSelect","imageUrl","snippet","thumbnails","default","url","onClick","className","src","title","VideoList","props","videoItems","videos","map","key","etag","SearchBar","state","term","type","value","this","onChange","event","onInputChange","target","setState","onNewSearch","Component","VideoDetail","videoId","id","description","App","selectedVideo","searchTerm","videoSearch","YTsearch","_","debounce","href","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAoBeA,EAlBO,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,cACxBC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAClD,OACC,wBAAIC,QAAS,kBAAMN,EAAcD,IAAOQ,UAAU,mBACjD,yBAAKA,UAAU,oBACd,yBAAKA,UAAU,cACd,yBAAKA,UAAU,eAAeC,IAAKP,KAEpC,yBAAKM,UAAU,cACd,yBAAKA,UAAU,iBACbR,EAAMG,QAAQO,WCONC,EAjBG,SAACC,GAElB,IAAMC,EAAaD,EAAME,OAAOC,KAAI,SAACf,GACpC,OACC,kBAAC,EAAD,CACCC,cAAeW,EAAMX,cACrBe,IAAKhB,EAAMiB,KACXjB,MAAOA,OAGV,OACC,wBAAIQ,UAAU,uBACZK,ICkBWK,E,YA7Bd,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KAEDO,MAAQ,CAAEC,KAAM,IAHH,E,sEAMT,IAAD,OAER,OACC,yBAAKZ,UAAU,cACd,8BACA,4BAAQa,KAAK,SAASb,UAAU,yBAAwB,2CAExD,8BACA,2BACCc,MAAOC,KAAKJ,MAAMC,KAClBI,SAAU,SAAAC,GAAK,OAAI,EAAKC,cAAcD,EAAME,OAAOL,c,oCAMzCF,GACbG,KAAKK,SAAS,CAACR,SACfG,KAAKX,MAAMiB,YAAYN,KAAKJ,MAAMC,U,GAzBZU,aCoBTC,EApBK,SAAC,GAAa,IAAZ/B,EAAW,EAAXA,MACrB,IAAIA,EACH,OAAO,2CAER,IAAMgC,EAAUhC,EAAMiC,GAAGD,QACnB1B,EAAG,wCAAoC0B,GAC7C,OACC,yBAAKxB,UAAU,yBACd,yBAAKA,UAAU,2CACf,4BAAQA,UAAU,wBAAwBC,IAAKH,KAE/C,yBAAKE,UAAU,WACd,6BAAMR,EAAMG,QAAQO,OACpB,6BAAMV,EAAMG,QAAQ+B,gBCqCTC,G,kBAxCd,WAAYvB,GAAQ,IAAD,8BAClB,4CAAMA,KAEDO,MAAQ,CACZL,OAAQ,GACRsB,cAAe,KACfC,WAAY,UAGb,EAAKC,YAAY,UATC,E,yEAYPlB,GAAO,IAAD,OACjBmB,IAAS,CAACvB,IAhBI,0CAgBUI,KAAMA,IAAO,SAACN,GACrC,EAAKc,SAAS,CACbd,OAAQA,EACRsB,cAAetB,EAAO,U,+BAKf,IAAD,OACFwB,EAAcE,IAAEC,UAAS,SAACrB,GAAW,EAAKkB,YAAYlB,KAAS,KACrE,OACC,6BACC,6BACC,kBAAC,EAAD,CAAWS,YAAaS,IACxB,kBAAC,EAAD,CAAatC,MAAOuB,KAAKJ,MAAMiB,gBAC/B,kBAAC,EAAD,CACCnC,cAAe,SAAAmC,GAAa,OAAI,EAAKR,SAAS,CAACQ,mBAC/CtB,OAAQS,KAAKJ,MAAML,UAErB,yBAAKN,UAAU,UAAf,gBACc,uBAAGkC,KAAK,iCAAR,4B,GAlCAZ,cCCEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,eD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8da73309.chunk.js","sourcesContent":["import React from 'react';\n\nconst VideoListItem = ({video, onVideoSelect}) => {\n\tconst imageUrl = video.snippet.thumbnails.default.url;\n\treturn (\n\t\t<li onClick={() => onVideoSelect(video)}className=\"list-group-item\">\n\t\t\t<div className=\"video-list media\">\n\t\t\t\t<div className=\"media-left\"> \n\t\t\t\t\t<img className=\"media-object\" src={imageUrl} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"media-body\">\n\t\t\t\t\t<div className=\"media-heading\">\n\t\t\t\t\t\t{video.snippet.title}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div> \n\t\t</li>\n\t);\n};\n\nexport default VideoListItem;","import React from 'react';\nimport VideoListItem from './video_list_item';\nconst VideoList = (props) => {\n\t// Setting a prop of single video in VideoListItem from props.videos array.\n\tconst videoItems = props.videos.map((video) => {\n\t\treturn (\n\t\t\t<VideoListItem \n\t\t\t\tonVideoSelect={props.onVideoSelect}\n\t\t\t\tkey={video.etag} \n\t\t\t\tvideo={video} />\n\t\t\t);\n\t});\n\treturn (\n\t\t<ul className=\"col-md-4 list-group\">\n\t\t\t{videoItems}\n\t\t</ul>\n\t);\n};\n\nexport default VideoList;","import React, { Component } from 'react'\n\nclass SearchBar extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { term: '' };\n\t}\n\n\trender() {\n\t\t// alert(this.state.term);\n\t\treturn (\n\t\t\t<div className=\"search-bar\">\n\t\t\t\t<span>\n\t\t\t\t<button type=\"button\" className=\"title btn btn-primary\"><b>PirateTube</b></button>\n\t\t\t\t</span>\n\t\t\t\t<span>\n\t\t\t\t<input \n\t\t\t\t\tvalue={this.state.term}\n\t\t\t\t\tonChange={event => this.onInputChange(event.target.value)} />\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tonInputChange(term) {\n\t\tthis.setState({term});\n\t\tthis.props.onNewSearch(this.state.term)\n\t}\n}\n\n\nexport default SearchBar;","import React from 'react';\n\nconst VideoDetail = ({video}) => {\n\tif(!video) {\n\t\treturn <div>Loading...</div>;\n\t}\n\tconst videoId = video.id.videoId;\n\tconst url = `https://www.youtube.com/embed/${videoId}`;\n\treturn (\n\t\t<div className=\"video-detail col-md-8\">\n\t\t\t<div className=\"embed-responsive embed-responsive-16by9\">\n\t\t\t<iframe className=\"embed-responsive-item\" src={url}></iframe>\n\t\t\t</div>\n\t\t\t<div className=\"details\">\n\t\t\t\t<div>{video.snippet.title}</div>\n\t\t\t\t<div>{video.snippet.description}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n}\n\nexport default VideoDetail;","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport YTsearch from 'youtube-api-search';\n\nimport VideoList from './components/video_list';\nimport SearchBar from './components/search_box';\nimport VideoDetail from './components/video_detail';\nimport './style/style.css';\nconst API_KEY = 'AIzaSyCcBRWMSoujk3UvlbYwUoIJ7Dty1kAah4Q';\n\nclass App extends Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { \n\t\t\tvideos: [],\n\t\t\tselectedVideo: null,\n\t\t\tsearchTerm: 'culruv'\n\t\t};\n\n\t\tthis.videoSearch('hack36');\n\t}\n\n\tvideoSearch(term) {\n\t\tYTsearch({key: API_KEY, term: term}, (videos) => {\n\t\t\tthis.setState({ \n\t\t\t\tvideos: videos,\n\t\t\t\tselectedVideo: videos[0]\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\tconst videoSearch = _.debounce((term) => { this.videoSearch(term) }, 300);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<SearchBar onNewSearch={videoSearch}/>\n\t\t\t\t\t<VideoDetail video={this.state.selectedVideo}/>\n\t\t\t\t\t<VideoList \n\t\t\t\t\t\tonVideoSelect={selectedVideo => this.setState({selectedVideo})} \n\t\t\t\t\t\tvideos={this.state.videos}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"footer\">\n\t\t\t\t\tDeveloped by <a href=\"https://github.com/pirateksh/\">Kshitiz Srivastava</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('.container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}